<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="CMakePresetLoader">{
  &quot;useNewFormat&quot;: true
}</component>
  <component name="CMakeReloadState">
    <option name="reloaded" value="true" />
  </component>
  <component name="CMakeRunConfigurationManager">
    <generated>
      <config projectName="Huffman" targetName="Huffman" />
    </generated>
  </component>
  <component name="CMakeSettings">
    <configurations>
      <configuration PROFILE_NAME="Debug" ENABLED="true" CONFIG_NAME="Debug" />
    </configurations>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="8b2114e6-6c8b-4009-b0b0-4b287663e576" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/main.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/main.cpp" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="CMakeBuildProfile:Debug" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/main.cpp" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectApplicationVersion">
    <option name="ide" value="CLion" />
    <option name="majorVersion" value="2022" />
    <option name="minorVersion" value="3" />
  </component>
  <component name="ProjectId" id="2WIcsKwsP4NPDf9pqdMosTTGJ7P" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/ilya/Desktop/Work/Huffman&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;configurable.group.editor&quot;,
    &quot;structure.view.defaults.are.configured&quot;: &quot;true&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="Huffman" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Huffman" TARGET_NAME="Huffman" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Huffman" RUN_TARGET_NAME="Huffman">
      <method v="2">
        <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="8b2114e6-6c8b-4009-b0b0-4b287663e576" name="Changes" comment="" />
      <created>1696423739955</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1696423739955</updated>
      <workItem from="1696423741416" duration="252000" />
      <workItem from="1696424062978" duration="245000" />
      <workItem from="1696424314825" duration="181000" />
      <workItem from="1696492986633" duration="113000" />
      <workItem from="1696559184612" duration="104000" />
      <workItem from="1696561488300" duration="16000" />
      <workItem from="1697098281065" duration="1746000" />
      <workItem from="1697101754261" duration="23000" />
      <workItem from="1697104147796" duration="1498000" />
      <workItem from="1697105884430" duration="2634000" />
      <workItem from="1697127330330" duration="6833000" />
      <workItem from="1697558274977" duration="2693000" />
    </task>
    <task id="LOCAL-00001" summary="Init commit">
      <created>1696423820357</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1696423820357</updated>
    </task>
    <task id="LOCAL-00002" summary="We have defined the class `Uzel` which,represents a node in a Huffman tree.">
      <created>1697128834460</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1697128834460</updated>
    </task>
    <task id="LOCAL-00003" summary="Fixed bugs, added Hafman class">
      <created>1697313964887</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1697313964887</updated>
    </task>
    <task id="LOCAL-00004" summary="The buildForEncode function is used to build a Huffman tree based on an input file. The function accepts an ifstream that contains data. First, the function clears the current tree, if there is one. Then it counts the frequency of occurrence of each character in the file and creates objects of type Uzel that contain the characters and their corresponding frequencies. The data is added to the list L. After that, the list L is sorted in ascending order of frequencies using Sort(). &#10;The TreeHaf function is used to build codes for each symbol in the Huffman tree and save them to buf. The function recursively passes through the Huffman tree starting from the root node. Moving to the left adds character 0 to the code, and moving to the right adds character 1. If the current node is a leaf, the code for the current character is written to buf. After traversing one branch of the tree, the last added character is removed from the code.&#10;The encode function is used to encode data from an input file and write it to the output file. It first calls the buildForEncode function to build the Huffman tree and populate the buf. The function then writes the frequency of occurrence information of each character to the output file. Next, the input file is overwritten. For each character from the input file, the function gets its code from buf and writes its bits to the tx variable.When the tx variable is filled until it reaches 8 bits, it is written to the output file. Then the tx variable is reset and the process is repeated. At the end, the function returns the ratio of the output file size to the input file size, which allows estimating the efficiency of data compression.">
      <created>1697547099548</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1697547099548</updated>
    </task>
    <task id="LOCAL-00005" summary="The buildForEncode function is used to build a Huffman tree based on an input file. The function accepts an ifstream that contains data. First, the function clears the current tree, if there is one. Then it counts the frequency of occurrence of each character in the file and creates objects of type Uzel that contain the characters and their corresponding frequencies. The data is added to the list L. After that, the list L is sorted in ascending order of frequencies using Sort(). &#10;The TreeHaf function is used to build codes for each symbol in the Huffman tree and save them to buf. The function recursively passes through the Huffman tree starting from the root node. Moving to the left adds character 0 to the code, and moving to the right adds character 1. If the current node is a leaf, the code for the current character is written to buf. After traversing one branch of the tree, the last added character is removed from the code.&#10;The encode function is used to encode data from an input file and write it to the output file. It first calls the buildForEncode function to build the Huffman tree and populate the buf. The function then writes the frequency of occurrence information of each character to the output file. Next, the input file is overwritten. For each character from the input file, the function gets its code from buf and writes its bits to the tx variable.When the tx variable is filled until it reaches 8 bits, it is written to the output file. Then the tx variable is reset and the process is repeated. At the end, the function returns the ratio of the output file size to the input file size, which allows estimating the efficiency of data compression.">
      <created>1697547138060</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1697547138061</updated>
    </task>
    <task id="LOCAL-00006" summary="We use the buildForDecode function to build a Huffman tree based on the character frequency information from the input file. It accepts an ifstream that contains information about the character rate and the encoded message. The function first clears the current tree if it already exists, and also clears m, code and buf to store information about the characters and their codes. The function then reads the character frequency information from the file and stores them in m. Next, a similar process of building a Huffman tree for encoding takes place, as described in a past commit&#10;The decode function is used to decode data from the input file and write it to the output file. It first calls the buildForDecode function to build a Huffman tree based on the information from the input file. The function then traverses the bits of the input file and the constructed Huffman tree. It first selects either the left or right subtree and continues traversing until a leaf node is reached, then the symbol that corresponds to the leaf node is written to the output file. The process is then repeated again from the root of the tree. The byte variable is used to read a byte from the file, and the count variable keeps track of the current position in the byte. When all bits of the byte have been processed, the next byte is read from the file and the process is repeated. The function returns true if decoding was successful and false if the input file was not opened.">
      <created>1697561214417</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1697561214417</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Init commit" />
    <MESSAGE value="We have defined the class `Uzel` which,represents a node in a Huffman tree." />
    <MESSAGE value="Fixed bugs, added Hafman class" />
    <MESSAGE value="The buildForEncode function is used to build a Huffman tree based on an input file. The function accepts an ifstream that contains data. First, the function clears the current tree, if there is one. Then it counts the frequency of occurrence of each character in the file and creates objects of type Uzel that contain the characters and their corresponding frequencies. The data is added to the list L. After that, the list L is sorted in ascending order of frequencies using Sort(). &#10;The TreeHaf function is used to build codes for each symbol in the Huffman tree and save them to buf. The function recursively passes through the Huffman tree starting from the root node. Moving to the left adds character 0 to the code, and moving to the right adds character 1. If the current node is a leaf, the code for the current character is written to buf. After traversing one branch of the tree, the last added character is removed from the code.&#10;The encode function is used to encode data from an input file and write it to the output file. It first calls the buildForEncode function to build the Huffman tree and populate the buf. The function then writes the frequency of occurrence information of each character to the output file. Next, the input file is overwritten. For each character from the input file, the function gets its code from buf and writes its bits to the tx variable.When the tx variable is filled until it reaches 8 bits, it is written to the output file. Then the tx variable is reset and the process is repeated. At the end, the function returns the ratio of the output file size to the input file size, which allows estimating the efficiency of data compression." />
    <MESSAGE value="We use the buildForDecode function to build a Huffman tree based on the character frequency information from the input file. It accepts an ifstream that contains information about the character rate and the encoded message. The function first clears the current tree if it already exists, and also clears m, code and buf to store information about the characters and their codes. The function then reads the character frequency information from the file and stores them in m. Next, a similar process of building a Huffman tree for encoding takes place, as described in a past commit&#10;The decode function is used to decode data from the input file and write it to the output file. It first calls the buildForDecode function to build a Huffman tree based on the information from the input file. The function then traverses the bits of the input file and the constructed Huffman tree. It first selects either the left or right subtree and continues traversing until a leaf node is reached, then the symbol that corresponds to the leaf node is written to the output file. The process is then repeated again from the root of the tree. The byte variable is used to read a byte from the file, and the count variable keeps track of the current position in the byte. When all bits of the byte have been processed, the next byte is read from the file and the process is repeated. The function returns true if decoding was successful and false if the input file was not opened." />
    <option name="LAST_COMMIT_MESSAGE" value="We use the buildForDecode function to build a Huffman tree based on the character frequency information from the input file. It accepts an ifstream that contains information about the character rate and the encoded message. The function first clears the current tree if it already exists, and also clears m, code and buf to store information about the characters and their codes. The function then reads the character frequency information from the file and stores them in m. Next, a similar process of building a Huffman tree for encoding takes place, as described in a past commit&#10;The decode function is used to decode data from the input file and write it to the output file. It first calls the buildForDecode function to build a Huffman tree based on the information from the input file. The function then traverses the bits of the input file and the constructed Huffman tree. It first selects either the left or right subtree and continues traversing until a leaf node is reached, then the symbol that corresponds to the leaf node is written to the output file. The process is then repeated again from the root of the tree. The byte variable is used to read a byte from the file, and the count variable keeps track of the current position in the byte. When all bits of the byte have been processed, the next byte is read from the file and the process is repeated. The function returns true if decoding was successful and false if the input file was not opened." />
  </component>
</project>